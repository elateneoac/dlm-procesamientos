
library(tidyverse)
library(lubridate)
library(tidytext)
library(stringi)
library(stopwords)
library(shiny)
library(shinycssloaders) #para ruedita de tiempo cargando
library(shinyalert)
library(shinybusy)
library(shinythemes)
library(shinyjs)
library(rsconnect)
library(data.table)
library(plotly)
library(d3wordcloud)
library(janitor)

# Para traer la API
library(curl)
library(jsonlite)

# Funcion para traer las noticias de la api
query_noticias <- function(desde, hasta, medios, secciones, todos, alguno, ninguno, textual) {
  h <- new_handle()
  handle_setheaders(h, usuario = usuario, token = token)
  
  # Construimos la URL con base a los parámetros de mas abajo
  url <- paste0("https://chaski.com.ar/noticias/",
                desde, "/",
                hasta, "/",
                paste(medios, collapse = "-"),
                "/",
                paste(secciones, collapse = "-"))
  
  # Si son NULL no los incorpota y trae todos
  if (!is.null(todos)) {
    url <- paste0(url, "?todos=", URLencode(todos))
  }
  if (!is.null(alguno)) {
    url <- paste0(url, "&alguno=", URLencode(alguno))
  }
  if (!is.null(ninguno)) {
    url <- paste0(url, "&ninguno=", URLencode(ninguno))
  }
  if (!is.null(textual)) {
    url <- paste0(url, "&textual=", URLencode(textual))
  }
  
  destfile <- "data/datos.json"
  base <- curl_download(url, destfile = destfile, handle = h)
  
  json <- fromJSON(destfile)
  data <- as.data.frame(json$noticia)
  return(data)
}

# Usuario y contraseña de la API
usuario ="joaquin.lovizio@gmail.com"
token = "09876"


diarios<-c("La Nación","Perfil", "El Destape", "Infobae", 
           "Ámbito Financiero","Todo Noticias","Página 12",
           "Clarín","Diario de Leuco","Casa Rosada")

# User interfaz ####
ui <- fluidPage(
  
  theme = shinytheme("superhero"),
  
  title = "Dicen los medios",
  
  titlePanel(
    title = div(img(src="logo_dlm.png", height=100), "Dicen los medios")),
  
  sidebarLayout(
    
    sidebarPanel(
      div(
        style = "display: flex; justify-content: center; align-items: center;",
        actionButton("btn_como_funciona", "Cómo buscar")),#creo el boton
      
      dateRangeInput("calendario", label = "Fechas a buscar", 
                     min = with_tz(Sys.Date()-8, tzone="America/Buenos_Aires"), 
                     max = with_tz(Sys.Date()-1, tzone="America/Buenos_Aires"), 
                     start = with_tz(Sys.Date()-8, tzone="America/Buenos_Aires"), 
                     end = with_tz(Sys.Date()-1, tzone="America/Buenos_Aires")),
      
      actionButton("btn_cargar_data", "1. Cargar noticias", class = "btn btn-danger"),
      
      textInput("Buscador", label = "Buscador", value = "", placeholder = "Ingrese los términos separados por comas"),
      
      selectizeInput("diarios", 
                  label = "Diarios", 
                  choices = diarios,
                  selected = diarios,
                  multiple = T,
                  options = list(
                    plugins = list("remove_button")
                  )),
      
      actionButton("btn_grafico", "2. Graficar", class = "btn btn-danger"),
      
      actionButton("btn_acerca_de", "Acerca de"),
      
      actionButton(inputId='btn_donacion', class="btn btn-success", 
                   label="Doná un matecito!", 
                   onclick ="window.open('https://www.matecito.co/DicenLosMedios', '_blank')")),
    mainPanel(heigth = "100%",
      tabsetPanel(
      tabPanel("Cantidad de noticias", 
               plotlyOutput("cantidad_noticias")%>%
                 withSpinner(
                   type = 6,
                   size = 2,
                   color = "#072437",
                   color.background = "white")),
      tabPanel("Línea de tiempo",
               plotlyOutput("linea")%>%
                 withSpinner(
                   type = 6,
                   size = 2,
                   color = "#072437",
                   color.background = "white")),
      tabPanel("Sentiment", 
               plotlyOutput("sentiment")%>%
                 withSpinner(
                   type = 6,
                   size = 2,
                   color = "#072437",
                   color.background = "white")),
      tabPanel("Nube de palabras",
               style = "background-color: white;",
               d3wordcloudOutput("nube_palabras")%>%
                 withSpinner(
                   type = 6,
                   size = 2,
                   color = "#072437",
                   color.background = "white"))
      ),
      fluidRow(
        column(
          width = 12,
          style = "text-align: right; padding-top: 100px; font-size: 16px;",
          HTML("Desarrollado por <b><a href='https://www.linkedin.com/in/joaquin-lovizio-ramos/' target='_blank'>Joaquín Lovizio Ramos</a></b> y <b><a href='https://www.linkedin.com/in/ariana-bardauil/' target='_blank'>Ariana Bardauil</a></b>")
        )
      )
    )
  )
)


# server ####
server <- function(input, output, session) {
  
  # intro DLM ####
  intro_DLM <- modalDialog(
    HTML('<!-- ventana emergente al iniciar la app -->
    <div class="modal-header">
      <h2 class="modal-title" id="exampleModalLabel">Bienvenido a <p class="text-info">Dicen Los Medios</p></h2>
    </div>
    <div class="modal-body">
      <h3>¿Qué es el tablero de Dicen los Medios?</h3>
      Dicen los medios es una herramienta que permite explorar el discurso de los medios digitales argentinos a partir de términos que sean de tu interés. Mediante este filtro realiza gráficos de frecuencia, líneas de tiempo, análisis de sentimiento y nubes de palabras.
      <h3>¿Quiénes somos?</h3> 
      Somos un grupo interdisciplinario que analiza qué, cuánto y cómo publican los principales medios digitales de Argentina usando técnicas de ciencia de datos, particularmente minería de texto.
      <h3>Contacto:</h3>
      <!-- Agregar los logotipos de las redes sociales y las páginas web -->
      <div>
        <!-- Logotipos de redes sociales -->
        <a href="https://www.instagram.com/dicenlosmedios/" target="_blank">
          <img src="logo_instagram.png" alt="Instagram" width="35" height="35">
        </a>
        <a href="https://twitter.com/dicenlosmedios" target="_blank">
          <img src="logo_twitter.png" alt="Twitter" width="30" height="30">
        </a>
        <a href="mailto:info@dicenlosmedios.com.ar" target="_blank">
          <img src="logo_mail.png" alt="Email" width="30" height="30">
        </a>
        <a href="https://www.linkedin.com/company/el-ateneo-ac/" target="_blank">
          <img src="logo_linkedin.png" alt="LinkedIn" width="25" height="25">
        </a>

        <!-- Logotipos de las páginas web -->
        <a href="https://dicenlosmedios.com.ar/" target="_blank">
          <img src="logo_dlm_blanco.png" alt="Logo DLM" width="60" height="50">
        </a>
        <a href="https://elateneo.org.ar/" target="_blank">
          <img src="logo_ateneo.png" alt="Logo Ateneo" width="60" height="50">
        </a>
      </div>
          </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-info" data-dismiss="modal">Cerrar</button>
      </div>
      </div>
    </div>
</div>
  '
    )
  )
  
  showModal(intro_DLM)
  
  observeEvent(input$btn_acerca_de, {
    showModal(intro_DLM)
  })
  
  # boton como funciona ####
  como_funciona <- modalDialog(
    HTML(
    '<div class="modal-header">
      <h2 class="modal-title" id="exampleModalLabel">Cómo buscar en el tablero</h2>
    </div>
    <div class="modal-body">
        Para buscar los términos: <br>
      <br>
    1° Seleccioná el <strong>rango de fechas</strong> y presioná el botón <strong>Cargar Noticias</strong> (hay un límite de 7 días y puede tardar un rato, paciencia!). <br>
    <br>
    2° En el <strong>buscador</strong>, insertá términos por los que te interese filtrar noticias (para términos exactos, encerralos entre comillas simples, el operador <strong>OR</strong> funciona para noticias que mencionen un término u otro). <br>
    <br>
    3° Seleccioná los diarios por los cuales le gustaría <strong>filtrar</strong> las noticias.<br>
    <br>
    4° Clickeá en el botón <strong>Graficar</strong> y desplazate por los paneles, algunos gráficos tardan un poco, paciencia de vuelta!
    </div>
      <div class="modal-footer">
      <button type="button" class="btn btn-info" data-dismiss="modal">Cerrar</button>
      </div>
      </div>
  </div>
</div>'
  ))
  
  observeEvent(input$btn_como_funciona, {
    showModal(como_funciona)
  })
  
  
  # seteo colores y filtro de palabras ####
  colores_diarios <- c("La Nación" = "#0462A8",
                     "Perfil" = "#047CA3",
                     "El Destape" = "#042C6C",
                     "Infobae" = "#FB8B04",
                     "Ámbito Financiero" = "#048BD3",
                     "Todo Noticias" = "#FB3434",
                     "Página 12" = "black",
                     "Clarín" = "#FB0424",
                     "Diario de Leuco" = "grey",
                     "Casa Rosada" = "salmon")
  
  colores_positividad <- c("Positivo"="#38C477",
                         "Algo positivo"="#87EBA8",
                         "Neutral"="#EEEEEE", 
                         "Algo negativo"="#F28268", 
                         "Negativo"="#F2543D")
  
  filtro_de_palabras <- c(stopwords("es"), "años", "año", "vs", "at", "efe", "dos")%>%
    stri_trans_general("Latin - ASCII")
  
  strings_repetidos <- c("este contenido se hizo gracias al apoyo de la comunidad de el destape sumate sigamos haciendo historia", 
                         "container video position relative width overflow hidden padding top responsive iframe video position absolute top left bottom right width height border none",
                         "si tenes dudas comunicate con nosotros a suscripciones ambito com ar Llamanos al o al de lunes a viernes de a",
                         "el contenido al que quiere acceder es exclusivo para suscriptores",
                         "more stories like this are available on bloomberg com c bloomberg l p")
  
  # escribo data ####
  dir.create("./data")
  
  base_notis_reactive <- reactiveVal(NULL)
  
  observeEvent(input$btn_cargar_data, {
    show_modal_spinner(spin = "atom", color = "#072437", text = "Cargando noticias, ya falta poquito!")
    
    # Asegura que el botón haya sido presionado antes de continuar
    req(input$btn_cargar_data)
    
    on.exit({
      # Limpia el spinner al finalizar la carga
      remove_modal_spinner()
    })
    
    ## Defino fechas
    fecha_desde <- input$calendario[1]
    fecha_hasta <- input$calendario[2]
    
    # Formatea las fechas en el formato deseado (sin separadores)
    desde <- format(fecha_desde, "%Y%m%d")
    hasta <- format(fecha_hasta, "%Y%m%d")
    medios <- NULL  # Diarios a filtrar
    secciones <- NULL
    todos <- NULL
    alguno <- NULL
    ninguno <- NULL
    textual <- NULL
    
    base_notis <- query_noticias(desde, hasta, medios, secciones, todos, alguno, ninguno, textual) %>%
      clean_names()
    
    base_notis <- base_notis |>
      rename("diario" = medio) %>%
      mutate(diario = case_when(
        diario == "perfil" ~ "Perfil",
        diario == "lanacion" ~ "La Nación",
        diario == "eldestape" ~ "El Destape",
        diario == "infobae" ~ "Infobae",
        diario == "ambito" ~ "Ámbito Financiero",
        diario == "todonoticias" ~ "Todo Noticias",
        diario == "paginadoce" ~ "Página 12",
        diario == "clarin" ~ "Clarín",
        diario == "diariodeleuco" ~ "Diario de Leuco",
        diario == "casarosada" ~ "Casa Rosada",
        TRUE ~ diario
      ),
      fecha = as.Date(fecha))
    
    # Almacena los datos en el reactiveVal
    base_notis_reactive(base_notis)
  })
  
  # datas reactive #####
  
  query_title<-reactive({
    
    query_title<-input$Buscador
    query_title<-str_replace_all(query_title, "\\bOR\\b", " o ")
    
    })
  
  base_filtrada <- reactive({
    
    #base_notis <- read.csv(file = "./data/base_notis.csv", encoding = "UTF-8")
    base_notis <- base_notis_reactive() %>%
      filter(diario %in% input$diarios)%>%
      mutate(
        texto= str_to_lower(texto),
        texto= stri_trans_general(texto, "Latin - ASCII"),
        texto= str_replace_all(texto,"www\\S*", ""), #saco urls con REGEX
        texto= str_replace_all(texto,"https\\S*", ""), #saco urls con REGEX
        texto= str_replace_all(texto, "[[:punct:]]", " "),
        texto= str_replace_all(texto, "[[:digit:]]+", " "),
        texto= str_squish(texto))
    
    if(input$Buscador == ""){
      
      base_filtrada <- base_notis
      
    } else
      #para buscar alguno de los terminos
      
      if(str_detect(input$Buscador, "\\bOR\\b")) {
        
        query <-str_squish(input$Buscador)
        query <-str_to_lower(query)
        query <-stri_trans_general(query, "Latin - ASCII")
        query <-str_replace_all(query, "\\'", "\\\\b")
        query <-str_replace_all(query, "\\bor\\b", "|")
        
        base_filtrada <- base_notis%>%
          filter(str_detect(texto, query))
        
      } else 
        #para buscar todos los terminos (vamos a pedir que estén separados por comas)
        
        if (str_detect(input$Buscador, ", ")) {
          
          query <-str_squish(input$Buscador)
          query <-str_to_lower(query)
          query <-stri_trans_general(query, "Latin - ASCII")
          query <-str_replace_all(query, "\\'", "\\\\b")
          
          palabra_vector <- unlist(strsplit(query, ", "))
          
          base_filtrada <- base_notis%>%
            rowwise()%>% #es como gtoup_by pero en vez de agrupar por columna, lo hace por fila
            mutate(filtrar = ifelse(all(str_detect(texto, palabra_vector)), "filtrar", "no filtrar"))%>%
            filter(filtrar == "filtrar")
          
        } else
          #para buscar la query especifica
        {
          query <-str_squish(input$Buscador)
          query <-str_to_lower(query)
          query <-stri_trans_general(query, "Latin - ASCII")
          query <-str_replace_all(query, "\\'", "\\\\b")
          
          base_filtrada <- base_notis%>%
            filter(str_detect(texto, query))
        }
  })
  
  base_filtrada_unnest <- reactive({
    base_filtrada()%>%
      unnest_tokens(word, texto)
  })
  # PLOTS ####
  
  ## cantidad de notis ####
  plot_cantidad_notis <- eventReactive(input$btn_grafico, {
    
    cantidad_notis_por_diario <- base_filtrada() %>%
      group_by(diario) %>%
      summarise(cantidad = n())
    
    plot_cantidad_notis <- ggplot(cantidad_notis_por_diario, 
                                  aes(reorder(diario, cantidad), 
                                      cantidad, 
                                      fill = diario,
                                      text = paste("Diario:", reorder(diario, cantidad), "<br>Cantidad de noticias:", cantidad)))+
      geom_bar(stat = "identity")+
      scale_fill_manual(values = colores_diarios)+
      coord_flip()+
      theme_minimal()+
      labs(title =

             if(input$Buscador == "") {"Cantidad total de noticias"}
           else {paste0("Noticias que mencionan ","'",query_title(),"'", " por diario seleccionado" )},

           caption = "Fuente: @dicenlosmedios",
           x = "",
           y = "Cantidad de noticias")
    
    plot_cantidad_notis <- ggplotly(plot_cantidad_notis, tooltip = "text")
    plot_cantidad_notis
    
  })
  
  output$cantidad_noticias <- renderPlotly(plot_cantidad_notis())
  
  ## linea de tiempo ####
  plot_linea <- eventReactive(input$btn_grafico, {
    
    base_linea <- base_filtrada() %>% 
      group_by(diario, fecha) %>% 
      summarise(cantidad = n())
    
    plot_linea <- ggplot(base_linea, aes(x=fecha, y=cantidad, color = diario)) +
      geom_line(aes(group = diario)) + geom_point() +
      scale_color_manual(values = colores_diarios) +
      theme_minimal()+
      theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      labs(title =
             
             if(input$Buscador == "") {"Cantidad total de noticias"}
           else {paste0("Noticias que mencionan ","'",query_title(),"'", " por diario seleccionado" )},
           
           caption = "Fuente: @dicenlosmedios",
           x = " ",
           y = "Cantidad de noticias")
    plot_linea
    
  })
  
  output$linea <- renderPlotly(plot_linea())
  
  
  
  
  ## sentiment ####
  sentiment_liia<-read.csv(paste0("./sentiment/sentiment_lexicon_liia.csv"), encoding = "UTF-8")%>%
    mutate(sentiment=cut(x = mean_likeness,
                         breaks = 5,
                         include.lowest = T,
                         labels = c("Negativo", 
                                    "Algo negativo", 
                                    "Neutral", 
                                    "Algo positivo", 
                                    "Positivo")))%>%
    mutate(word=stri_trans_general(word, "Latin - ASCII"))
  
  plot_sentiment <- eventReactive(input$btn_grafico,{
    
      base_sentiment <- base_filtrada_unnest() %>%
      # unnest_tokens(input = texto, output = word, to_lower = T)%>% #tokenizo (separo noticias en palabras)
      filter(!word%in%filtro_de_palabras)%>%
      inner_join(sentiment_liia)%>%
      group_by(diario, sentiment)%>%
      summarise(prom=n())
    
    plot_sentiment_liia<-ggplot(base_sentiment, 
                                aes(diario, prom, fill=sentiment))+
      geom_bar(stat="identity", position = "fill")+
      theme_minimal()+
      scale_fill_manual(values = colores_positividad)+
      scale_y_continuous(labels=scales::percent_format(scale = 100))+
      coord_flip()+
      labs(x="", 
           y="", 
           title = "Positividad de diarios",
           subtitle = if(input$Buscador == "") {""}
           else {paste0("Noticias que mencionan ","'",query_title(),"'", " por diario seleccionado" )},
           caption = "Fuente: @dicenlosmedios")
    plot_sentiment_liia
    
  })
  
  output$sentiment <- renderPlotly(plot_sentiment())
  
  
  ## nube de palabras ####
  plot_nube <- eventReactive(input$btn_grafico,{
    mem_before <- pryr::mem_used()
    nube_palabras <- base_filtrada_unnest() %>%
      # unnest_tokens(word, texto) %>%
      filter(!word%in%filtro_de_palabras &
               nchar(word)>1)%>% #filtro palabras con menos de 1 letra
      group_by(word)%>%
      summarise(freq=n())%>% #hay que llamar freq a la variable para que wordcloud2 la levante
      slice_max(order_by = freq, n = 175)%>%
      mutate(grupo=cut(freq, breaks = 5, 
                       labels = c("#bf677a", "#eab37d", "#ffdd83", "#DCDFAF", "#7ae5b7")))
    
    print(nube_palabras)
    
    words<-nube_palabras$word
    freqs<-nube_palabras$freq
    colores<-nube_palabras$grupo
    
    plot_nube<-d3wordcloud(words = words, freqs = freqs, 
                           colors = colores,
                           rotate.min = 0, rotate.max = 0, 
                           padding = 14, tooltip = T)
    mem_after <- pryr::mem_used()
    mem_used_diff <- mem_after - mem_before
    print(mem_used_diff)
    # htmlwidgets::saveWidget(plot_nube, "wordcloud.html", selfcontained = TRUE, background = "white")
    # htmlwidgets::saveWidget(plot_nube, "wordcloud.html", selfcontained = TRUE, background = "black")
    
    plot_nube

  })

  output$nube_palabras <- renderD3wordcloud(plot_nube())
    
}


# app ####
shinyApp(ui = ui, server = server)
